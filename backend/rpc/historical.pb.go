// Code generated by protoc-gen-go. DO NOT EDIT.
// source: historical.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HistChartProg struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	NumSymbols           int64    `protobuf:"varint,2,opt,name=num_symbols,json=numSymbols,proto3" json:"num_symbols,omitempty"`
	CurSymbolNum         int64    `protobuf:"varint,3,opt,name=cur_symbol_num,json=curSymbolNum,proto3" json:"cur_symbol_num,omitempty"`
	NumObjects           int64    `protobuf:"varint,4,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	CurObjectNum         int64    `protobuf:"varint,5,opt,name=cur_object_num,json=curObjectNum,proto3" json:"cur_object_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistChartProg) Reset()         { *m = HistChartProg{} }
func (m *HistChartProg) String() string { return proto.CompactTextString(m) }
func (*HistChartProg) ProtoMessage()    {}
func (*HistChartProg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52eec6afbe961f5, []int{0}
}

func (m *HistChartProg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistChartProg.Unmarshal(m, b)
}
func (m *HistChartProg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistChartProg.Marshal(b, m, deterministic)
}
func (m *HistChartProg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistChartProg.Merge(m, src)
}
func (m *HistChartProg) XXX_Size() int {
	return xxx_messageInfo_HistChartProg.Size(m)
}
func (m *HistChartProg) XXX_DiscardUnknown() {
	xxx_messageInfo_HistChartProg.DiscardUnknown(m)
}

var xxx_messageInfo_HistChartProg proto.InternalMessageInfo

func (m *HistChartProg) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *HistChartProg) GetNumSymbols() int64 {
	if m != nil {
		return m.NumSymbols
	}
	return 0
}

func (m *HistChartProg) GetCurSymbolNum() int64 {
	if m != nil {
		return m.CurSymbolNum
	}
	return 0
}

func (m *HistChartProg) GetNumObjects() int64 {
	if m != nil {
		return m.NumObjects
	}
	return 0
}

func (m *HistChartProg) GetCurObjectNum() int64 {
	if m != nil {
		return m.CurObjectNum
	}
	return 0
}

type HistChartFetchReq struct {
	Exchange             Exchanges `protobuf:"varint,1,opt,name=exchange,proto3,enum=entities.Exchanges" json:"exchange,omitempty"`
	Symbol               string    `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HistChartFetchReq) Reset()         { *m = HistChartFetchReq{} }
func (m *HistChartFetchReq) String() string { return proto.CompactTextString(m) }
func (*HistChartFetchReq) ProtoMessage()    {}
func (*HistChartFetchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52eec6afbe961f5, []int{1}
}

func (m *HistChartFetchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistChartFetchReq.Unmarshal(m, b)
}
func (m *HistChartFetchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistChartFetchReq.Marshal(b, m, deterministic)
}
func (m *HistChartFetchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistChartFetchReq.Merge(m, src)
}
func (m *HistChartFetchReq) XXX_Size() int {
	return xxx_messageInfo_HistChartFetchReq.Size(m)
}
func (m *HistChartFetchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HistChartFetchReq.DiscardUnknown(m)
}

var xxx_messageInfo_HistChartFetchReq proto.InternalMessageInfo

func (m *HistChartFetchReq) GetExchange() Exchanges {
	if m != nil {
		return m.Exchange
	}
	return Exchanges_Binance
}

func (m *HistChartFetchReq) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func init() {
	proto.RegisterType((*HistChartProg)(nil), "historical.HistChartProg")
	proto.RegisterType((*HistChartFetchReq)(nil), "historical.HistChartFetchReq")
}

func init() { proto.RegisterFile("historical.proto", fileDescriptor_a52eec6afbe961f5) }

var fileDescriptor_a52eec6afbe961f5 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xc9, 0xba, 0x0d, 0x77, 0xd4, 0xa2, 0x11, 0xa4, 0x0e, 0xc4, 0x31, 0xbc, 0xd8, 0x55,
	0x95, 0xf9, 0x06, 0x13, 0xc5, 0xab, 0x4d, 0xea, 0x9d, 0x08, 0xa3, 0x0d, 0x61, 0x8d, 0x2c, 0xc9,
	0x4c, 0x4e, 0xc0, 0x3d, 0x98, 0xef, 0x27, 0x26, 0x6d, 0x2c, 0xe8, 0x65, 0xce, 0xf9, 0xf8, 0x72,
	0xfe, 0x1f, 0x4e, 0x6a, 0x61, 0x51, 0x1b, 0xc1, 0xca, 0x6d, 0xbe, 0x33, 0x1a, 0x35, 0x85, 0xdf,
	0xc9, 0x38, 0xe5, 0x0a, 0x05, 0x0a, 0x6e, 0xc3, 0x6e, 0xfa, 0x45, 0xe0, 0xf8, 0x49, 0x58, 0xbc,
	0xaf, 0x4b, 0x83, 0xcf, 0x46, 0x6f, 0xe8, 0x39, 0x0c, 0xed, 0x5e, 0x56, 0x7a, 0x9b, 0x91, 0x09,
	0x99, 0x8d, 0x8a, 0xe6, 0x45, 0xaf, 0xe0, 0x50, 0x39, 0xb9, 0x0e, 0x2f, 0x9b, 0xf5, 0x26, 0x64,
	0x96, 0x14, 0xa0, 0x9c, 0x7c, 0x09, 0x13, 0x7a, 0x0d, 0x29, 0x73, 0xa6, 0x01, 0xd6, 0xca, 0xc9,
	0x2c, 0xf1, 0xcc, 0x11, 0x73, 0x26, 0x30, 0x4b, 0x27, 0x5b, 0x8d, 0xae, 0xde, 0x39, 0x43, 0x9b,
	0xf5, 0xa3, 0x66, 0x15, 0x26, 0xad, 0x26, 0x00, 0x5e, 0x33, 0x88, 0x9a, 0xc0, 0x2c, 0x9d, 0x9c,
	0xbe, 0xc1, 0x69, 0x3c, 0xfb, 0x91, 0x23, 0xab, 0x0b, 0xfe, 0x41, 0x6f, 0xe0, 0x80, 0x7f, 0xb2,
	0xba, 0x54, 0x1b, 0xee, 0x8f, 0x4f, 0xe7, 0x67, 0x79, 0xcc, 0xfb, 0xd0, 0x6c, 0x6c, 0x11, 0xa1,
	0x4e, 0xd6, 0x5e, 0x37, 0xeb, 0x7c, 0x05, 0xa3, 0x68, 0xa7, 0x0b, 0xe8, 0xdb, 0xbd, 0x62, 0xf4,
	0x32, 0xef, 0x34, 0xfb, 0xe7, 0xf3, 0xf1, 0xc5, 0xbf, 0xeb, 0x9f, 0x4a, 0x6f, 0xc9, 0x62, 0xf0,
	0x9a, 0x98, 0x1d, 0xab, 0x86, 0xbe, 0xf4, 0xbb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x9e,
	0x6d, 0xea, 0xa4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HistChartClient is the client API for HistChart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistChartClient interface {
	Sync(ctx context.Context, in *HistChartFetchReq, opts ...grpc.CallOption) (HistChart_SyncClient, error)
}

type histChartClient struct {
	cc *grpc.ClientConn
}

func NewHistChartClient(cc *grpc.ClientConn) HistChartClient {
	return &histChartClient{cc}
}

func (c *histChartClient) Sync(ctx context.Context, in *HistChartFetchReq, opts ...grpc.CallOption) (HistChart_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HistChart_serviceDesc.Streams[0], "/historical.HistChart/sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &histChartSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistChart_SyncClient interface {
	Recv() (*HistChartProg, error)
	grpc.ClientStream
}

type histChartSyncClient struct {
	grpc.ClientStream
}

func (x *histChartSyncClient) Recv() (*HistChartProg, error) {
	m := new(HistChartProg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HistChartServer is the server API for HistChart service.
type HistChartServer interface {
	Sync(*HistChartFetchReq, HistChart_SyncServer) error
}

// UnimplementedHistChartServer can be embedded to have forward compatible implementations.
type UnimplementedHistChartServer struct {
}

func (*UnimplementedHistChartServer) Sync(req *HistChartFetchReq, srv HistChart_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterHistChartServer(s *grpc.Server, srv HistChartServer) {
	s.RegisterService(&_HistChart_serviceDesc, srv)
}

func _HistChart_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistChartFetchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistChartServer).Sync(m, &histChartSyncServer{stream})
}

type HistChart_SyncServer interface {
	Send(*HistChartProg) error
	grpc.ServerStream
}

type histChartSyncServer struct {
	grpc.ServerStream
}

func (x *histChartSyncServer) Send(m *HistChartProg) error {
	return x.ServerStream.SendMsg(m)
}

var _HistChart_serviceDesc = grpc.ServiceDesc{
	ServiceName: "historical.HistChart",
	HandlerType: (*HistChartServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sync",
			Handler:       _HistChart_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "historical.proto",
}
