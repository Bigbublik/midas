version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  backend-rust:
    docker:
      - image: rust
    # working_directory: .
  docker-build:
    docker:
      - image: docker

jobs:
  build-backend:
    executor: backend-rust
    steps:
      - checkout
      - restore_cache:
          key: build-cache-{{ checksum "backend/Cargo.lock" }}
      - run:
          name: "Install musl tools"
          command: "apt-get update && apt-get install -y musl-tools"
      - run: rustup component add rustfmt
      - run:
          name: "Install musl package"
          command: "rustup target add x86_64-unknown-linux-musl"
      - run:
          name: "Extract openssl-musl package"
          command: "tar xJvf openssl-musl.txz && mv openssl-musl ~/"
          working_directory: ./.circleci
      - run:
          name: Build the package
          command: |
            export OPENSSL_DIR=${HOME}/openssl-musl/musl
            cargo build --target x86_64-unknown-linux-musl --release
          working_directory: ./backend
          environment:
            PKG_CONFIG_ALLOW_CROSS: '1'
            OPENSSL_STATIC: 'true'
      - save_cache:
          paths:
            - ./backend/target
            - ~/.rustup
          key: build-cache-{{ checksum "backend/Cargo.lock" }}
      - run:
          name: "Collect executable"
          command: |
            mkdir bin
            mv \
              $(file \
                --mime-type *|\
                grep application/x-pie-executable|\
                sed -e 's@:[[:space:]]*application\/x-pie-executable@@g'\
              ) \
            bin
          working_directory:
            ./backend/target/x86_64-unknown-linux-musl/release
      - run:
          name: "Creating Distribution Archive"
          command: tar cJvf dist.txz bin
          working_directory:
            ./backend/target/x86_64-unknown-linux-musl/release
      - store_artifacts:
          path: ./backend/target/x86_64-unknown-linux-musl/release/dist.txz
          destination: dist.txz
      - slack/status
      - persist_to_workspace:
          root: .
          paths:
            - ./backend/target/x86_64-unknown-linux-musl/release/bin
            - ./backend/prod.dockerfile
  deploy-image:
    executor: docker-build
    parameters:
      service_name:
        type: string
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 19.03.12
      - run:
          name: "Install bash"
          command: |
            apk update
            apk add --no-cache bash curl
      - run:
          name: Log into docker.pkg.github.com
          command: |
            docker login https://docker.pkg.github.com \
              -u ${GITHUB_USERNAME} \
              -p ${GITHUB_TOKEN}
      - run:
          name: Build Docker Image
          command: |
            docker build \
              -f prod.dockerfile \
              --build-arg SERVICE=<<parameters.service_name>> \
              -t docker.pkg.github.com/hiroaki-yamamoto/midas/<<parameters.service_name>> .
          working_directory: backend
      - run:
          name: Push Docker Image
          command: |
            docker push docker.pkg.github.com/hiroaki-yamamoto/midas/<<parameters.service_name>>
      - run: docker logout https://docker.pkg.github.com
      - slack/status

devel-filter: &devel-filter
  filters:
    branches:
      only: /.*/

workflows:
  version: 2
  build:
    jobs:
      - build-backend:
          <<: *devel-filter
      - deploy-image:
          name: "Historical Kline Service Deployment"
          requires:
            - build-backend
          filters:
            branches:
              only: master
          service_name: historical_service
      - deploy-image:
          name: "Historical Kline Fetch Worker Deployment"
          requires:
            - build-backend
          filters:
            branches:
              only: master
          service_name: historical_fetch_worker
      - deploy-image:
          name: "Historical Kline Record Worker Deployment"
          requires:
            - build-backend
          filters:
            branches:
              only: master
          service_name: historical_record_worker
      - deploy-image:
          name: "Symbol Service Deployment"
          requires:
            - build-backend
          filters:
            branches:
              only: master
          service_name: symbol_service
      - deploy-image:
          name: "Trade Observer Worker Deployment"
          requires:
            - build-backend
          filters:
            branches:
              only: master
          service_name: observer_worker
      - deploy-image:
          name: "Trade Observer Service Deployment"
          requires:
            - build-backend
          filters:
            branches:
              only: master
          service_name: observer_service
