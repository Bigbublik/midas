// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TradeType int32

const (
	TradeType_Buy  TradeType = 0
	TradeType_Sell TradeType = 1
)

var TradeType_name = map[int32]string{
	0: "Buy",
	1: "Sell",
}

var TradeType_value = map[string]int32{
	"Buy":  0,
	"Sell": 1,
}

func (x TradeType) String() string {
	return proto.EnumName(TradeType_name, int32(x))
}

func (TradeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

type SubscribeRequest struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TickInterval         string   `protobuf:"bytes,2,opt,name=tickInterval,proto3" json:"tickInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SubscribeRequest) GetTickInterval() string {
	if m != nil {
		return m.TickInterval
	}
	return ""
}

type SubscribeResponse struct {
	Symbol               string               `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type                 TradeType            `protobuf:"varint,3,opt,name=type,proto3,enum=testbeds.TradeType" json:"type,omitempty"`
	Price                float64              `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Qty                  float64              `protobuf:"fixed64,5,opt,name=qty,proto3" json:"qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SubscribeResponse) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SubscribeResponse) GetType() TradeType {
	if m != nil {
		return m.Type
	}
	return TradeType_Buy
}

func (m *SubscribeResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SubscribeResponse) GetQty() float64 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func init() {
	proto.RegisterEnum("testbeds.TradeType", TradeType_name, TradeType_value)
	proto.RegisterType((*SubscribeRequest)(nil), "testbeds.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "testbeds.SubscribeResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0x4d, 0x4f, 0x84, 0x30,
	0x14, 0xb4, 0xb2, 0x5f, 0x3c, 0x3f, 0x82, 0xd5, 0x18, 0x82, 0x89, 0x6e, 0xf6, 0xe2, 0xc6, 0x43,
	0xd7, 0xe0, 0xc5, 0x33, 0x07, 0x13, 0x2f, 0x26, 0xb2, 0x9c, 0xbc, 0x51, 0x78, 0x6e, 0x88, 0xb0,
	0xed, 0xb6, 0x65, 0x13, 0xfe, 0x98, 0xbf, 0xcf, 0x58, 0x84, 0x55, 0xa3, 0xb7, 0xbe, 0x79, 0xd3,
	0x79, 0x33, 0x03, 0x47, 0x1a, 0xd5, 0xb6, 0xc8, 0x90, 0x49, 0x25, 0x8c, 0xa0, 0x13, 0x83, 0xda,
	0x70, 0xcc, 0x75, 0x70, 0xb5, 0x12, 0x62, 0x55, 0xe2, 0xc2, 0xe2, 0xbc, 0x7e, 0x5d, 0x98, 0xa2,
	0x42, 0x6d, 0xd2, 0x4a, 0xb6, 0xd4, 0xd9, 0x13, 0x78, 0xcb, 0x9a, 0xeb, 0x4c, 0x15, 0x1c, 0x63,
	0xdc, 0xd4, 0xa8, 0x0d, 0x3d, 0x87, 0x91, 0x6e, 0x2a, 0x2e, 0x4a, 0x9f, 0x4c, 0xc9, 0xdc, 0x8d,
	0xbf, 0x26, 0x3a, 0x83, 0x43, 0x53, 0x64, 0x6f, 0x8f, 0x6b, 0x83, 0x6a, 0x9b, 0x96, 0xfe, 0xbe,
	0xdd, 0xfe, 0xc0, 0x66, 0xef, 0x04, 0x4e, 0xbe, 0x09, 0x6a, 0x29, 0xd6, 0x1a, 0xff, 0x55, 0xbc,
	0x07, 0xb7, 0x37, 0x64, 0xe5, 0x0e, 0xc2, 0x80, 0xb5, 0x96, 0x59, 0x67, 0x99, 0x25, 0x1d, 0x23,
	0xde, 0x91, 0xe9, 0x35, 0x0c, 0x4c, 0x23, 0xd1, 0x77, 0xa6, 0x64, 0x7e, 0x1c, 0x9e, 0xb2, 0x2e,
	0x31, 0x4b, 0x54, 0x9a, 0x63, 0xd2, 0x48, 0x8c, 0x2d, 0x81, 0x9e, 0xc1, 0x50, 0xaa, 0x22, 0x43,
	0x7f, 0x30, 0x25, 0x73, 0x12, 0xb7, 0x03, 0xf5, 0xc0, 0xd9, 0x98, 0xc6, 0x1f, 0x5a, 0xec, 0xf3,
	0x79, 0x73, 0x09, 0x6e, 0xff, 0x95, 0x8e, 0xc1, 0x89, 0xea, 0xc6, 0xdb, 0xa3, 0x13, 0x18, 0x2c,
	0xb1, 0x2c, 0x3d, 0x12, 0x3e, 0xc3, 0x38, 0x41, 0x6d, 0x22, 0xcc, 0xe9, 0x03, 0xb8, 0x7d, 0x44,
	0x1a, 0xec, 0x4e, 0xff, 0x2e, 0x32, 0xb8, 0xf8, 0x73, 0xd7, 0x76, 0x72, 0x4b, 0xa2, 0xe1, 0x8b,
	0xa3, 0x64, 0xc6, 0x47, 0x36, 0xe9, 0xdd, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0xb8, 0x6f,
	0xb0, 0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestBedClient is the client API for TestBed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestBedClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (TestBed_SubscribeClient, error)
}

type testBedClient struct {
	cc *grpc.ClientConn
}

func NewTestBedClient(cc *grpc.ClientConn) TestBedClient {
	return &testBedClient{cc}
}

func (c *testBedClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (TestBed_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestBed_serviceDesc.Streams[0], "/testbeds.TestBed/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBedSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestBed_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type testBedSubscribeClient struct {
	grpc.ClientStream
}

func (x *testBedSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestBedServer is the server API for TestBed service.
type TestBedServer interface {
	Subscribe(*SubscribeRequest, TestBed_SubscribeServer) error
}

// UnimplementedTestBedServer can be embedded to have forward compatible implementations.
type UnimplementedTestBedServer struct {
}

func (*UnimplementedTestBedServer) Subscribe(req *SubscribeRequest, srv TestBed_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterTestBedServer(s *grpc.Server, srv TestBedServer) {
	s.RegisterService(&_TestBed_serviceDesc, srv)
}

func _TestBed_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestBedServer).Subscribe(m, &testBedSubscribeServer{stream})
}

type TestBed_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type testBedSubscribeServer struct {
	grpc.ServerStream
}

func (x *testBedSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TestBed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testbeds.TestBed",
	HandlerType: (*TestBedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TestBed_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
